plot(b)
s <- terrain(b, "slope")
plot(s, main="Slope and legacy")
df <- extract(s, legacy, df=T)
min(df$slope)
max(df$slope)
hist(df$slope, main="slope distribution of Steve's points", xlab ='Depth (m)')
plot(t, main="TPI and legacy")
df <- extract(t, legacy, df=T)
min(df$tpi)
max(df$tpi)
hist(df$slope, main="slope distribution of Steve's points", xlab ='Depth (m)')
hist(df$tpi, main="tpi distribution of Steve's points", xlab ='Depth (m)')
hist(df$tpi, main="tpi distribution of Steve's points", xlab ='tpi')
df <- extract(s, legacy, df=T)
min(df$slope)
max(df$slope)
hist(df$tpi, main="slope distribution of Steve's points", xlab ='slope')
hist(df$slope, main="slope distribution of Steve's points", xlab ='slope')
plot(t, main="TPI and legacy")
# libraries ----
library( rgdal)
library( sp)
library( raster)
# clear environment ----
rm(list = ls())
# Set names ----
study <- "Ningaloo-Parks-MBH"
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
# read bathy ----
b <- raster(paste(r.dir, "depth-Ningaloo-Parks-MBH.tif", sep='/'))
plot(b)
#b2 <- flip(b, 'y')
#plot(b2)
#b3 <- projectRaster(b2, crs=proj4string(legacy))
e <- drawExtent()
b <- crop(b, e)
plot(b)
b[b < -400] <- NA
# Libraries ----
library
# Libraries ----
library(raster)
library(rgdal)
library(sp)
library(ggplot2)
#library(pals)
library(RColorBrewer)
# clear environment ----
rm(list = ls())
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
p.dir <- paste(w.dir, "plots", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
w.dir
dirx <- "Y:/MBH_Ningaloo_Parks"
# load West coast bathy --
b <- raster(paste(dirx,  "rasters/depth-Ningaloo-Parks-MBH.tif", sep='/'))
plot(b)
# read shapefiles of zones ----
npin <- readOGR(paste(s.dir, "Point-Cloates-inNP.shp", sep='/'))
plot(npin, add=T)
npout <- readOGR(paste(s.dir, "Point-Cloates-outNP.shp", sep='/'))
plot(npout, add=T)
# crop bathy to zones ----
e <- draw.Extent()
# crop bathy to zones ----
e <- drawExtent()
b2 <- crop(b, e)
plot(b2)
plot(npin, add=T)
plot(npout, add=T)
depth <- b
slope <- terrain(depth, "slope")
plot(slope)
tpi <- terrain(depth, "TPI")
plot(tpi)
depth <- b2
slope <- terrain(depth, "slope")
plot(slope)
tpi <- terrain(depth, "TPI")
plot(tpi)
flowdir <- terrain(depth, "flowdir")
plot(flowdir)
roughness <- terrain(depth, "roughness")
plot(roughness)
aspect <- terrain(depth, "aspect")
plot(aspect)
sea.terrain <- stack(depth, slope, tpi, flowdir, roughness, aspect)
plot(sea.terrain)
names(sea.terrain) <- c("depth","slope", "tpi", "flowdir", "roughness", "aspect")
# save derivatives of sea terrain ----
writeRaster(sea.terrain, paste(r.dir, "PtCloates_sea-terrain.tif", sep='/'))
# libraries ----
library( rgdal)
library( sp)
library( raster)
# clear environment ----
rm(list = ls())
# Set names ----
study <- "PtCloates"
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
# Read polygons ----
inNP <- readOGR(paste(s.dir, "Point-Cloates-inNP.shp", sep = '/'))
outNP <- readOGR(paste(s.dir, "Point-Cloates-outNP.shp", sep = '/'))
# check crs --
proj4string(inNP)
proj4string(outNP)
# Prepare list of polygons ----
zones <- list()
zones$inNP <- inNP
zones$outNP <- outNP
# join both exclusion zones polygons
zones$All <- raster::union(zones$inNP, zones$outNP)
plot(zones$All)
head(zones$All)
## Read raster data ----
ders <- stack(paste(r.dir, "PtCloates_sea-terrain.tif", sep ='/'))
#intial look to see area
plot( zones$All , border='black')
plot( zones$inNP , border='black', col = 'green', add=TRUE)
plot( zones$outNP, add=TRUE, col='blue')
saveRDS(zones, file= paste0(paste(d.dir, paste("Zones" , study, sep='_'), sep='/'), ".RDS"))
## Read raster data ----
ders <- stack(paste(r.dir, "PtCloates_sea-terrain.tif", sep ='/'))
plot(ders)
names(ders) <-  c("depth","slope", "tpi", "flowdir", "roughness", "aspect")
plot(ders)
# Save rasters rds ----
rasterfiles <- list()
rasterfiles$depth <- ders$depth
rasterfiles$slope <- ders$slope
rasterfiles$tpi <- ders$tpi
paste("rasters" , study, sep='-')
paste("rasters" , study, sep='-')
# Save raster data ----
saveRDS(rasterfiles, file= paste0(paste(d.dir, paste("rasters" , study, sep='_'), sep='/'), ".RDS"))
## Converting polygons to a common raster ----
b <- ders$depth
plot(b)
###       ###       ### this takes a while for fine res data  ###      ###       ###
#g1_raster <- rasterize(x=g1, y=b, field=g1@data[,1], background=NA, fun="max")
inNP_raster <- rasterize(x=inNP, y=b, field=1, background=NA, fun="first")
plot(inNP_raster)
outNP_raster <- rasterize(x=outNP, y=b, field=1, background=NA, fun="first")
plot(outNP_raster)
plot(outNP_raster, add=T)
plot(inNP_raster)
plot(outNP_raster, add=T)
plot(inNP, add=T); plot(outNP, add=T)
#convert and combine --
tmp1 <- as.data.frame( inNP_raster, xy=TRUE)
tmp2 <- as.data.frame( outNP_raster, xy=TRUE)
b
plot(depth)
plot(ders$depth)
tmp3 <- as.data.frame( ders$depth, xy = TRUE)
tmp4 <- as.data.frame( ders$slope, xy = TRUE)
tmp5 <- as.data.frame( ders$tpi, xy = TRUE)
# Griffen data --
Dat <- cbind( tmp1, tmp2[,3])
Dat <- cbind( Dat, tmp3[,3])
Dat <- cbind( Dat, tmp4[,3])
Dat <- cbind( Dat, tmp5[,3])
head(Dat)
# Set column names --
df.names <- c("Eastern", "Northing", "inNP", "outNP", "depth", "g4", "slope", "tpi")
names(Dat) <- df.names
# Set column names --
df.names <- c("Eastern", "Northing", "inNP", "outNP", "depth", "slope", "tpi")
names(Dat) <- df.names
head(Dat)
plot(ders$slope)
# Save raster dfs rds ----
saveRDS(Dat, file= paste0(paste(d.dir, paste("Data" , study, sep='_'), sep='/'), ".RDS"))
library( rgdal)
library( sp)
library( raster)
# clear environment ----
rm(list = ls())
# Set names ----
study <- "PtCloates-MBH"
platform <- "Bruvs"
design.version <- "v1"
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
dat <- readRDS(paste(d.dir,"Data-PtCloates.RDS", sep ='/'))
dat <- readRDS(paste(d.dir,"Data_PtCloates.RDS", sep ='/'))
rast <- readRDS(paste(d.dir, "rasters_PtCloates.RDS", sep='/'))
zones <- readRDS(paste(d.dir, "Zones_PtCloates.RDS", sep='/'))
straw.nums <- c(12, 12)  # for BRUVs - numbers of drops rest w structure + caut with structure,cau wout str, open w str, open wout str
#straw.nums <- c(6,6,6,6,6,6,8,6,6,20,28,12,28) # for BOSS
straw.props <- straw.nums / sum( straw.nums)
straw.props
names( straw.nums) <- names( straw.props) <- c("inNP", "outNP")
straw.props
saveRDS(straw.nums, file = paste0(paste(d.dir, paste("StrawmanNumbers" , study, platform, design.version, sep='_'), sep='/'), ".RDS"))
#Bathy.quant <- c(0,0.20, 0.66, 1)
Bathy.quant <- c(0,0.20, 0.35, 0.66, 1)
Bathy.cuts <- quantile(rast$depth, Bathy.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
Bathy.cuts # -200 -149 -118  -86
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
Bathy.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
Bathy.targetProps <-  Bathy.targetNums / sum( Bathy.targetNums)
Bathy.targetProps
Dat_small <- dat[!is.na( dat$depth),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catB <- cut( rast$depth, breaks=Bathy.cuts, na.rm=TRUE)
plot( catB, add=TRUE); plot( zones$gAll, border = "black", add=TRUE); plot(zones$oz, border = "black", add= TRUE); plot(zones$cs, border = "black", add= TRUE)
plot( catB, add=TRUE); plot( zones$All, border = "black", add=TRUE)
catB <- cut( rast$depth, breaks=Bathy.cuts, na.rm=TRUE)
Bathy.cuts
plot(rast$depth)
test <- rast$depth
test2 <- crop(test, zones$All)
plot(test2)
ploT(zones$All, add=T)
plot(zones$All, add=T)
test2 <- raster::mask(test2, zones$All)
plot(test2)
plot(zones$All, add=T)
# clear environment ----
rm(list = ls())
# Set names ----
study <- "PtCloates"
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
# Read polygons ----
inNP <- readOGR(paste(s.dir, "Point-Cloates-inNP.shp", sep = '/'))
outNP <- readOGR(paste(s.dir, "Point-Cloates-outNP.shp", sep = '/'))
# check crs --
proj4string(inNP)
proj4string(outNP)
# Prepare list of polygons ----
zones <- list()
zones$inNP <- inNP
zones$outNP <- outNP
# join zones polygons
zones$All <- raster::union(zones$inNP, zones$outNP)
plot(zones$All)
head(zones$All)
#intial look to see area
plot( zones$All , border='black')
plot( zones$inNP , border='black', col = 'green', add=TRUE)
plot( zones$outNP, add=TRUE, col='blue')
saveRDS(zones, file= paste0(paste(d.dir, paste("Zones" , study, sep='_'), sep='/'), ".RDS"))
## Read raster data ----
ders <- stack(paste(r.dir, "PtCloates_sea-terrain.tif", sep ='/'))
plot(ders)
names(ders) <-  c("depth","slope", "tpi", "flowdir", "roughness", "aspect")
plot(ders)
ders <- mask(ders, zones$All)
plot(ders)
# Save rasters rds ----
rasterfiles <- list()
rasterfiles$depth <- ders$depth
rasterfiles$slope <- ders$slope
rasterfiles$tpi <- ders$tpi
# Save raster data ----
saveRDS(rasterfiles, file= paste0(paste(d.dir, paste("rasters" , study, sep='_'), sep='/'), ".RDS"))
## Converting polygons to a common raster ----
b <- ders$depth
plot(b)
###       ###       ### this takes a while for fine res data  ###      ###       ###
#g1_raster <- rasterize(x=g1, y=b, field=g1@data[,1], background=NA, fun="max")
inNP_raster <- rasterize(x=inNP, y=b, field=1, background=NA, fun="first")
plot(inNP_raster)
outNP_raster <- rasterize(x=outNP, y=b, field=1, background=NA, fun="first")
plot(outNP_raster, add=T)
plot(inNP, add=T); plot(outNP, add=T)
#convert and combine --
tmp1 <- as.data.frame( inNP_raster, xy=TRUE)
tmp2 <- as.data.frame( outNP_raster, xy=TRUE)
tmp3 <- as.data.frame( ders$depth, xy = TRUE)
tmp4 <- as.data.frame( ders$slope, xy = TRUE)
tmp5 <- as.data.frame( ders$tpi, xy = TRUE)
# Griffen data --
Dat <- cbind( tmp1, tmp2[,3])
Dat <- cbind( Dat, tmp3[,3])
Dat <- cbind( Dat, tmp4[,3])
Dat <- cbind( Dat, tmp5[,3])
head(Dat)
# Set column names --
df.names <- c("Eastern", "Northing", "inNP", "outNP", "depth", "slope", "tpi")
names(Dat) <- df.names
head(Dat)
# Save raster dfs rds ----
saveRDS(Dat, file= paste0(paste(d.dir, paste("Data" , study, sep='_'), sep='/'), ".RDS"))
# clear environment ----
rm(list = ls())
# Set names ----
study <- "PtCloates-MBH"
platform <- "Bruvs"
design.version <- "v1"
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
dat <- readRDS(paste(d.dir,"Data_PtCloates.RDS", sep ='/'))
rast <- readRDS(paste(d.dir, "rasters_PtCloates.RDS", sep='/'))
zones <- readRDS(paste(d.dir, "Zones_PtCloates.RDS", sep='/'))
straw.nums <- c(12, 12)  # for BRUVs - numbers of drops rest w structure + caut with structure,cau wout str, open w str, open wout str
#straw.nums <- c(6,6,6,6,6,6,8,6,6,20,28,12,28) # for BOSS
straw.props <- straw.nums / sum( straw.nums)
straw.props
names( straw.nums) <- names( straw.props) <- c("inNP", "outNP")
saveRDS(straw.nums, file = paste0(paste(d.dir, paste("StrawmanNumbers" , study, platform, design.version, sep='_'), sep='/'), ".RDS"))
#Bathy.quant <- c(0,0.20, 0.66, 1)
Bathy.quant <- c(0,0.20, 0.35, 0.66, 1)
Bathy.cuts <- quantile(rast$depth, Bathy.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
Bathy.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( Bathy.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
Bathy.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
Bathy.targetProps <-  Bathy.targetNums / sum( Bathy.targetNums)
Bathy.targetProps
Dat_small <- dat[!is.na( dat$depth),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catB <- cut( rast$depth, breaks=Bathy.cuts, na.rm=TRUE)
plot( catB, add=TRUE); plot( zones$All, border = "black", add=TRUE)
plot( catB); plot( zones$All, border = "black", add=TRUE)
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$depth)
Bathy.quant <- c(0,0.3, 0.7, 1)
Bathy.cuts <- quantile(rast$depth, Bathy.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
Bathy.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( Bathy.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
Bathy.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
Bathy.targetProps <-  Bathy.targetNums / sum( Bathy.targetNums)
Bathy.targetProps
Dat_small <- dat[!is.na( dat$depth),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
Dat_small <- dat[!is.na( dat$depth),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catB <- cut( rast$depth, breaks=Bathy.cuts, na.rm=TRUE)
plot( catB); plot( zones$All, border = "black", add=TRUE)
Bathy.cuts # -200 -149 -118  -86
plot(rast$depth)
plot(zones$All, add=T)
plot(rast$slope)
plot(zones$All, add=T)
plot(rast$tpi)
plot(zones$All, add=T)
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$slope)
Bathy.quant <- c(0,0.3, 0.7, 1)
Bathy.cuts <- quantile(rast$slope, Bathy.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
Bathy.cuts # -200 -149 -118  -86
Dat_small <- dat[!is.na( dat$slope),]
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$slope)
slope.quant <- c(0,0.3, 0.7, 1)
slope.cuts <- quantile(rast$slope, Bathy.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
slope.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( slope.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
slope.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
slope.targetProps <-  slope.targetNums / sum( slope.targetNums)
slope.targetProps
Dat_small <- dat[!is.na( dat$slope),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catS <- cut( rast$slope, breaks=Bathy.cuts, na.rm=TRUE)
plot( catS); plot( zones$All, border = "black", add=TRUE)
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$tpi)
tpi.quant <- c(0,0.3, 0.7, 1)
tpi.cuts <- quantile(rast$tpi, tpi.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
tpi.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( tpi.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
tpi.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
tpi.targetProps <-  slope.targetNums / sum( tpi.targetNums)
tpi.targetProps
Dat_small <- dat[!is.na( dat$tpi),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catT <- cut( rast$tpi, breaks=tpi.cuts, na.rm=TRUE)
plot( catS); plot( zones$All, border = "black", add=TRUE)
plot( catT); plot( zones$All, border = "black", add=TRUE)
tpi.quant <- c(0,0.1, 0.7, 1)
tpi.cuts <- quantile(rast$tpi, tpi.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
tpi.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( tpi.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
tpi.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
tpi.targetProps <-  slope.targetNums / sum( tpi.targetNums)
tpi.targetProps
Dat_small <- dat[!is.na( dat$tpi),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catT <- cut( rast$tpi, breaks=tpi.cuts, na.rm=TRUE)
plot( catT); plot( zones$All, border = "black", add=TRUE)
tpi.quant <- c(0,0.1, 0.7, 1)
tpi.cuts <- quantile(rast$tpi, tpi.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
tpi.quant <- c(0,0.1, 0.9, 1)
tpi.cuts <- quantile(rast$tpi, tpi.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
tpi.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( tpi.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
tpi.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
tpi.targetProps <-  slope.targetNums / sum( tpi.targetNums)
tpi.targetProps
Dat_small <- dat[!is.na( dat$tpi),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catT <- cut( rast$tpi, breaks=tpi.cuts, na.rm=TRUE)
plot( catT); plot( zones$All, border = "black", add=TRUE)
tpi.quant <- c(0,0.2, 0.9, 1)
tpi.cuts <- quantile(rast$tpi, tpi.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
tpi.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( tpi.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
tpi.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
tpi.targetProps <-  slope.targetNums / sum( tpi.targetNums)
tpi.targetProps
Dat_small <- dat[!is.na( dat$tpi),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catT <- cut( rast$tpi, breaks=tpi.cuts, na.rm=TRUE)
plot( catT); plot( zones$All, border = "black", add=TRUE)
tpi.cuts # -200 -149 -118  -86
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$depth)
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$depth)
Bathy.quant <- c(0,0.3, 0.7, 1)
Bathy.cuts <- quantile(rast$depth, Bathy.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
Bathy.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( Bathy.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
Bathy.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
Bathy.targetProps <-  Bathy.targetNums / sum( Bathy.targetNums)
Bathy.targetProps
Dat_small <- dat[!is.na( dat$depth),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catB <- cut( rast$depth, breaks=Bathy.cuts, na.rm=TRUE)
plot( catB); plot( zones$All, border = "black", add=TRUE)
Bathy.cuts # -200 -149 -118  -86
writeRaster( catB, file=paste0(paste(d.dir, paste("Bathy_cuts" , study, platform, design.version, sep='-'), sep='/'), ".tif"), overwrite = TRUE)
catT <- cut( rast$tpi, breaks=tpi.cuts, na.rm=TRUE)
plot( catT); plot( zones$All, border = "black", add=TRUE)
writeRaster( catT, file=paste0(paste(d.dir, paste("Tpi_cuts" , study, platform, design.version, sep='-'), sep='/'), ".tif"), overwrite = TRUE)
