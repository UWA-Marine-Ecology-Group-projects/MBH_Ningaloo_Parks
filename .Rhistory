pot.sitess <- pot.sites[,c(1,2)]
head(pot.sitess)
length(pot.sites$x)
class(potsmat)
head(potsmat)
potsmat <- as.matrix(pot.sitess)
length(potsmat)
# inclusion probs as numeric or df
#ip <- as.data.frame(pot.sites[,3])
ip <- pot.sites[,3]
class(ip)
ip
length(ip)
sum(ip, na.rm = T)
# alter inclProbs test1----
altInclProbs <- alterInclProbs(legacy.sites = lega,
#legacy.sites = legacyss2,
potential.sites = potsmat,
#potential.sites = pot.sitess,
#n = 200,
inclusion.probs = ip)
image( x=unique( potsmat[,1]), y=unique( potsmat[,2]),
#z=matrix( altInclProbs, nrow=3405, ncol=7215),
z=matrix( altInclProbs, nrow=2270, ncol=4810),
main="Adjusted Inclusion Probabilities",
ylab=colnames( potsmat)[2], xlab=colnames( potsmat)[1])
legacyss2
lega
# Read legacy sites ----
legacy <- readOGR(paste(s.dir, "remaining_legacy.shp", sep='/'))
proj4string(legacy)
plot(legacy, pch=20)
legacys <- as.data.frame(legacy)
legacyss <- legacys[,c(5,6)]
legacyss
legacyss <- legacyss[c(3:13),]
# class(legacyss)
legacyss2 <- as.data.frame(cbind(legacyss[,2], legacyss[,1]))
legacyss2
class(legacyss2)
names(legacyss2) <- c('x','y')
names(legacyss2)
legacyss2
# in ascending longitude
legacyss2 <- arrange(legacyss2, y)
legacyss2
# make matrix
#legacyss <- legacyss[c(1:5),]
#class(legacyss)
lega <- as.matrix(legacyss2)
class(lega)
lega
# Read legacy sites ----
legacy <- readOGR(paste(s.dir, "remaining_legacy.shp", sep='/'))
proj4string(legacy)
plot(legacy, pch=20)
legacys <- as.data.frame(legacy)
legacyss <- legacys[,c(5,6)]
legacyss
legacyss <- legacyss[c(1:13),]
# class(legacyss)
legacyss2 <- as.data.frame(cbind(legacyss[,2], legacyss[,1]))
legacyss2
class(legacyss2)
names(legacyss2) <- c('x','y')
names(legacyss2)
legacyss2
# in ascending longitude
legacyss2 <- arrange(legacyss2, y)
legacyss2
# make matrix
#legacyss <- legacyss[c(1:5),]
#class(legacyss)
lega <- as.matrix(legacyss2)
class(lega)
lega
# alter inclProbs test1----
altInclProbs <- alterInclProbs(legacy.sites = lega,
#legacy.sites = legacyss2,
potential.sites = potsmat,
#potential.sites = pot.sitess,
#n = 200,
inclusion.probs = ip)
image( x=unique( potsmat[,1]), y=unique( potsmat[,2]),
#z=matrix( altInclProbs, nrow=3405, ncol=7215),
z=matrix( altInclProbs, nrow=2270, ncol=4810),
main="Adjusted Inclusion Probabilities",
ylab=colnames( potsmat)[2], xlab=colnames( potsmat)[1])
# Read legacy sites ----
legacy <- readOGR(paste(s.dir, "remaining_legacy.shp", sep='/'))
proj4string(legacy)
plot(legacy, pch=20)
legacys <- as.data.frame(legacy)
legacyss <- legacys[,c(5,6)]
legacyss
legacyss <- legacyss[c(3:13),]
# class(legacyss)
legacyss2 <- as.data.frame(cbind(legacyss[,2], legacyss[,1]))
legacyss2
class(legacyss2)
names(legacyss2) <- c('x','y')
names(legacyss2)
legacyss2
# in ascending longitude
legacyss2 <- arrange(legacyss2, y)
legacyss2
# make matrix
#legacyss <- legacyss[c(1:5),]
#class(legacyss)
lega <- as.matrix(legacyss2)
class(lega)
lega
# alter inclProbs test1----
altInclProbs <- alterInclProbs(legacy.sites = lega,
#legacy.sites = legacyss2,
potential.sites = potsmat,
#potential.sites = pot.sitess,
#n = 200,
inclusion.probs = ip)
image( x=unique( potsmat[,1]), y=unique( potsmat[,2]),
#z=matrix( altInclProbs, nrow=3405, ncol=7215),
z=matrix( altInclProbs, nrow=2270, ncol=4810),
main="Adjusted Inclusion Probabilities",
ylab=colnames( potsmat)[2], xlab=colnames( potsmat)[1])
aIP <- cbind(pot.sitess, altInclProbs)
head(aIP)
class(aIP)
coordinates(aIP) <- ~x+y
gridded(aIP) <- TRUE
altIncProbs <- raster(aIP)
plot(altIncProbs)
cellStats(altIncProbs, 'sum')
# aggregate raster
altip <- aggregate(altIncProbs, 10)
cellStats(altip, 'sum')
aIP <- cbind(pot.sitess, altInclProbs)
head(aIP)
class(aIP)
coordinates(aIP) <- ~x+y
gridded(aIP) <- TRUE
altIncProbs <- raster(aIP)
plot(altIncProbs)
cellStats(altIncProbs, 'sum')
# check legacys ---
legacyss2
# check legacys ---
le <- legacyss2
coordinates(le) <- ~x+y
plot(le, pch=20, add=T)
plot(legacy, col='blue', add=T)
plot(altIncProbs)
plot(legacy[c(1,2),], col='blue', add=T)
plot(le, pch=20, add=T)
plot(legacy[1,], col='red', add=T)
plot(legacy[2,], col='green', add=T)
plot(legacy[1,], col='red', add=T)
# Read legacy sites ----
legacy <- readOGR(paste(s.dir, "remaining_legacy.shp", sep='/'))
proj4string(legacy)
plot(legacy, pch=20)
legacys <- as.data.frame(legacy)
legacyss <- legacys[,c(5,6)]
legacyss
legacyss <- legacyss[c(2:13),]
# class(legacyss)
legacyss2 <- as.data.frame(cbind(legacyss[,2], legacyss[,1]))
legacyss2
class(legacyss2)
names(legacyss2) <- c('x','y')
names(legacyss2)
legacyss2
# in ascending longitude
legacyss2 <- arrange(legacyss2, y)
legacyss2
# make matrix
#legacyss <- legacyss[c(1:5),]
#class(legacyss)
lega <- as.matrix(legacyss2)
class(lega)
lega
# alter inclProbs test1----
altInclProbs <- alterInclProbs(legacy.sites = lega,
#legacy.sites = legacyss2,
potential.sites = potsmat,
#potential.sites = pot.sitess,
#n = 200,
inclusion.probs = ip)
image( x=unique( potsmat[,1]), y=unique( potsmat[,2]),
#z=matrix( altInclProbs, nrow=3405, ncol=7215),
z=matrix( altInclProbs, nrow=2270, ncol=4810),
main="Adjusted Inclusion Probabilities",
ylab=colnames( potsmat)[2], xlab=colnames( potsmat)[1])
aIP <- cbind(pot.sitess, altInclProbs)
head(aIP)
class(aIP)
coordinates(aIP) <- ~x+y
gridded(aIP) <- TRUE
altIncProbs <- raster(aIP)
plot(altIncProbs)
# aggregate raster
altip <- aggregate(altIncProbs, 10)
cellStats(altip, 'sum')
plot(altip)
# check legacys ---
le <- legacyss2
coordinates(le) <- ~x+y
plot(le, pch=20, add=T)
head(legacyys2)
head(legacyss2)
design.version
platform
writeRaster( altip, file=paste0(paste(d.dir, paste("altIncProbs" , study, platform, design.version, sep='-'), sep='/'), ".tif"), overwrite = TRUE)
legacys
head(legacys)
legacys
le
head(le)
lega
legas <- legacys[-1,]
legas
le
head(le)
le$ID <- legas$ID
le$name <- legas$name
head(le)
le <- as.data.frame(le, df = T)
le
le <- as.data.frame(le)
le
# check legacys ---
le <- legacyss2
head(le)
le$ID <- legas$ID
le$name <- legas$name
head(le)
le <- as.data.frame(le)
le
# save remaining legacy sites ----
writeOGR(le, s.dir, "remaining_legacy", drive = "ESRI Shapefile", overwrite = T)
# check legacys ---
le <- legacyss2
head(le)
le$ID <- legas$ID
le$name <- legas$name
head(le)
le
# check legacys ---
le <- legacyss2
coordinates(le) <- ~x+y
head(le)
le$ID <- legas$ID
le$name <- legas$name
head(le)
le
# save remaining legacy sites ----
writeOGR(le, s.dir, "remaining_legacy", drive = "ESRI Shapefile", overwrite = T)
# clear environment ----
rm(list = ls())
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
p.dir <- paste(w.dir, "plots", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
o.dir <- paste(w.dir, "outputs", sep='/')
# Read in the inclusion probs ----
# cov.cuts <- raster(paste(d.dir, "Tpi_cuts-PtCloates-MBH-BOSS-v1.tif", sep='/'))
# plot(cov.cuts)
inclProbs <- raster(paste(d.dir, "inclProbs-Ningaloo_Parks-BOSS-v2.tif", sep='/'))
# Read in the inclusion probs ----
# cov.cuts <- raster(paste(d.dir, "Tpi_cuts-PtCloates-MBH-BOSS-v1.tif", sep='/'))
# plot(cov.cuts)
inclProbs <- raster(paste(d.dir, "altIncProbs-Ningaloo_Parks-BOSS-v2.tif", sep='/'))
plot(inclProbs)
inclProbs <- setValues( inclProbs, values( inclProbs) / sum( values( inclProbs), na.rm=TRUE))
plot(inclProbs)
# check sun of incl probs --
cellStats(inclProbs, 'sum')
rootInclProbs <- inclProbs
#rootInclProbs <- setValues( rootInclProbs, sqrt( values( rootInclProbs)))
rootInclProbs <- setValues( rootInclProbs, values( rootInclProbs)*200)
cellStats(rootInclProbs, 'sum')
cellStats(rootInclProbs, 'sum')
plot(rootInclProbs)
inclProbs <- rootInclProbs
# Read data ----
rast <- readRDS(paste(d.dir, "rasters_Ningaloo_Parks.RDS", sep='/'))
ip <- as.data.frame(inclProbs, xy=T)
newSites <- list(inNP = NULL, outNP = NULL)
for( zz in c("inNP", "outNP")){
print( zz)
#the number of samples to take (specified minus the legacy number)
#numby <- floor( (straw.nums[zz])/4)  # for clustered cluster - without legacy sites
numby <- floor( (straw.nums[zz])) # for not clustered sites
#numby <- floor( (straw.nums[zz] - numRef[zz])/2)
#numby <- floor( (straw.nums[zz] - numRef[zz])) # with legacy sites
#set up spatial domain
myZone <- zones[[zz]]
#if( zz == "AMP"){
# myZone = zones$AMP - zones$IUCN2
#set.seed( 747)
#}
#tmpIP <- mask( rootInclProbs, myZone)
tmpIP <- mask( inclProbs, myZone)
tmpIP <- crop( tmpIP, myZone)
#take the sample of clusters based on root incl probs
newSites[[zz]] <- quasiSamp( n=numby, potential.sites=coordinates( tmpIP), inclusion.probs=values(tmpIP), nSampsToConsider=5000)
#plotting (maybe remove at a later date?)
tmpIPFull <- mask( inclProbs, myZone)
tmpIPFull <- crop( tmpIPFull, myZone)
plot( tmpIPFull)
#plot( legacySites, add=TRUE, pch=1, col='red')
points( newSites[[zz]][,c("x","y")], pch=20, col='black')
}
ip <- as.data.frame(inclProbs, xy=T)
head(ip)
samp<- quasiSamp( n=200, dimension=2,
potential.sites = ip[,c("x","y")],
inclusion.probs=ip$inclProbs.Ningaloo_Parks.BOSS.v2,
nSampsToConsider=20000)
plot(inclProbs)
points( samp[,c("x","y")], pch=20, cex=0.3, col = "black")
# Read in the inclusion probs ----
# cov.cuts <- raster(paste(d.dir, "Tpi_cuts-PtCloates-MBH-BOSS-v1.tif", sep='/'))
# plot(cov.cuts)
inclProbs <- raster(paste(d.dir, "altIncProbs-Ningaloo_Parks-BOSS-v2.tif", sep='/'))
plot(inclProbs)
inclProbs <- setValues( inclProbs, values( inclProbs) / sum( values( inclProbs), na.rm=TRUE))
plot(inclProbs)
# check sun of incl probs --
cellStats(inclProbs, 'sum')
rootInclProbs <- inclProbs
#rootInclProbs <- setValues( rootInclProbs, sqrt( values( rootInclProbs)))
rootInclProbs <- setValues( rootInclProbs, values( rootInclProbs)*200)
cellStats(rootInclProbs, 'sum')
cellStats(rootInclProbs, 'sum')
plot(rootInclProbs)
inclProbs <- rootInclProbs
# Read data ----
rast <- readRDS(paste(d.dir, "rasters_Ningaloo_Parks.RDS", sep='/'))
ip <- as.data.frame(inclProbs, xy=T)
head(ip)
200-12
samp<- quasiSamp( n=188, dimension=2,
potential.sites = ip[,c("x","y")],
inclusion.probs=ip$inclProbs.Ningaloo_Parks.BOSS.v2,
nSampsToConsider=20000)
samp<- quasiSamp( n=188, dimension=2,
potential.sites = ip[,c("x","y")],
inclusion.probs=ip$altIncProbs.Ningaloo_Parks.BOSS.v2,
nSampsToConsider=20000)
# Read in the inclusion probs ----
# cov.cuts <- raster(paste(d.dir, "Tpi_cuts-PtCloates-MBH-BOSS-v1.tif", sep='/'))
# plot(cov.cuts)
inclProbs <- raster(paste(d.dir, "altIncProbs-Ningaloo_Parks-BOSS-v2.tif", sep='/'))
inclProbs
plot(inclProbs)
inclProbs <- setValues( inclProbs, values( inclProbs) / sum( values( inclProbs), na.rm=TRUE))
plot(inclProbs)
# check sun of incl probs --
cellStats(inclProbs, 'sum')
rootInclProbs <- inclProbs
#rootInclProbs <- setValues( rootInclProbs, sqrt( values( rootInclProbs)))
rootInclProbs <- setValues( rootInclProbs, values( rootInclProbs)*200)
cellStats(rootInclProbs, 'sum')
cellStats(rootInclProbs, 'sum')
plot(rootInclProbs)
inclProbs <- rootInclProbs
# Read data ----
rast <- readRDS(paste(d.dir, "rasters_Ningaloo_Parks.RDS", sep='/'))
ip <- as.data.frame(inclProbs, xy=T)
head(ip)
samp<- quasiSamp( n=188, dimension=2,
potential.sites = ip[,c("x","y")],
inclusion.probs=ip$altIncProbs.Ningaloo_Parks.BOSS.v2,
nSampsToConsider=30000)
points( samp[,c("x","y")], pch=20, cex=0.3, col = "black")
#if( class( BRUVS) != "SpatialPointsDataFrame")
legacy <- readOGR(paste(s.dir, "remaining_legacy.shp", add=T))
paste(s.dir, "remaining_legacy.shp", add=T)
#if( class( BRUVS) != "SpatialPointsDataFrame")
legacy <- readOGR(paste(s.dir, "remaining_legacy.shp", sep='/'))
plot(legacy, pch=10, col='red', add=T)
plot(legacy, pch=20, col='red', add=T)
plot(inclProbs)
points( samp[,c("x","y")], pch=20, cex=0.3, col = "black")
plot(legacy, pch=20, col='red', add=T)
## Check how far apart they are ---
## Get CRS in utm ----
crs1 <- CRS("+init=epsg:32750") # WGS 84 / UTM zone 50S
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
samp
head(samp)
# join sites and name them ----
samp$type <- 'MBH'
head(samp)
legacy$type <- 'legacy'
head(legacy)
class(samp)
coordinates(samp) <- ~x+y
allsites <- union(samp, legacy)
head(allsites)
allsites
ID <- paste(1:200)
ID <- paste(1:200)
ID
allsites$uniqueID <- ID
head(allsites)
plot(inclProbs)
plot(allsites, pch = 20, col=allsites$type, add=T)
allsites$type <- as.factor(allsites$type)
plot(inclProbs)
plot(allsites, pch = 20, col=allsites$type, add=T)
## Check how far apart they are ---
## Get CRS in utm ----
crs1 <- CRS("+init=epsg:32750") # WGS 84 / UTM zone 50S
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
dist1 <- gDistance(p1u, byid =T)
dist1
max(dist1)
min(dist1[dist1 > 0]) # minimum distance other than 0
## p1 ----
p1_matrix <- gWithinDistance(p1u, dist = 50, byid = TRUE)
diag(p1_matrix) <- NA
p1_matrix
## Check how far apart they are ---
## Get CRS in utm ----
crs1 <- CRS("+init=epsg:32750") # WGS 84 / UTM zone 50S
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
proj4string(inclProbs)
proj4string(rast$depth)
proj4string(allsites) <- proj4string(rast$depth)
## Check how far apart they are ---
## Get CRS in utm ----
crs1 <- CRS("+init=epsg:32750") # WGS 84 / UTM zone 50S
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
dist1 <- gDistance(p1u, byid =T)
dist1
max(dist1)
min(dist1[dist1 > 0]) # minimum distance other than 0
## p1 ----
p1_matrix <- gWithinDistance(p1u, dist = 50, byid = TRUE)
diag(p1_matrix) <- NA
p1_matrix
p1_matrix[lower.tri(p1_matrix, diag=TRUE)] <- NA
p1_matrix
colSums(p1_matrix, na.rm=TRUE) == 0
v1 <- colSums(p1_matrix, na.rm=TRUE) == 0
p1u[v1, ] # 24 features left
## p1 ----
p1_matrix <- gWithinDistance(p1u, dist = 150, byid = TRUE)
diag(p1_matrix) <- NA
p1_matrix
p1_matrix[lower.tri(p1_matrix, diag=TRUE)] <- NA
p1_matrix
colSums(p1_matrix, na.rm=TRUE) == 0
v1 <- colSums(p1_matrix, na.rm=TRUE) == 0
p1u[v1, ] # 24 features left
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
dist1 <- gDistance(p1u, byid =T)
dist1
max(dist1)
## p1 ----
p1_matrix <- gWithinDistance(p1u, dist = 100, byid = TRUE)
diag(p1_matrix) <- NA
p1_matrix
p1_matrix[lower.tri(p1_matrix, diag=TRUE)] <- NA
p1_matrix
colSums(p1_matrix, na.rm=TRUE) == 0
v1 <- colSums(p1_matrix, na.rm=TRUE) == 0
p1u[v1, ] # 24 features left
remaining.sites <- p1u[v1, ]
remaining.sites <- spTransform(remaining.sites, proj4string(legacy))
remaining.sites <- spTransform(remaining.sites, proj4string(allsites))
head(remaining.sites)
# plot --
plot(inclProbs, main = "Inclusion probabilities")
plot(cov.cuts, main = "TPI cuts")
plot(rast$tpi, main = "TPI")
plot(zones$All, add=T)
remaining.sites$type  <- as.factor(remaining.sites$type)
remaining.sites$zone  <- as.factor(remaining.sites$zone)
plot(remaining.sites, pch=20, add=T)
# plot --
plot(inclProbs, main = "Inclusion probabilities")
remaining.sites$type  <- as.factor(remaining.sites$type)
remaining.sites$zone  <- as.factor(remaining.sites$zone)
plot(remaining.sites, pch=20, add=T)
plot(remaining.sites, col=remaining.sites$type, pch = 20, add=T) # 41
# rename zone
head(remaining.sites)
remaining.sites
## Save --
site <- "Ningaloo_Parks"
design <- "200BOSS"
version <- "v2"
design
version
writeOGR(samp, o.dir, paste(site, design, version, sep='-'), driver = "ESRI Shapefile", overwrite = T)
class(samp)
writeOGR(samp, o.dir, paste(site, design, version, sep='-'), driver = "ESRI Shapefile", overwrite = T)
samp)
samp
remaining.sites <- spTransform(remaining.sites, proj4string(allsites))
head(remaining.sites)
writeOGR(remaining.sites, o.dir, paste(site, design, version, sep='-'), driver = "ESRI Shapefile", overwrite = T)
