d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
study <- "PtCloates-MBH"
platform <- "BOSS"
design.version <- "v1"
total.no.deployments <- "50_deployments"
# Read legacy sites ----
legacy <- read.csv(paste(s.dir, "legacy_Point_Cloates.csv", sep='/'))
coordinates(legacy) <- ~x+y
#legacy <- readOGR(paste(s.dir, "Legacy_sites.shp", sep='/'))
proj4string(legacy)
plot(legacy, pch=20, add=T)
legacys <- as.data.frame(legacy)
legacyss <- legacys[,c(2,3)]
# make matrix
#legacyss <- legacyss[c(1:5),]
#class(legacyss)
lega <- as.matrix(legacyss)
class(lega)
lega
# Read inclusion probabilities ----
inclProbs <- raster(paste(d.dir, "inclProbs-PtCloates-MBH-BOSS-v1.tif", sep='/'))
plot(inclProbs)
# test dissagregating inclusion probs ----
inclProbs <- raster::disaggregate(inclProbs, 10)
plot(inclProbs)
# potential sites ----
pot.sites <- as.data.frame(inclProbs, xy = TRUE)
head(pot.sites)
pot.sites <- arrange(pot.sites, y)
head(pot.sites)
class(pot.sites)
# as df
pot.sitess <- pot.sites[,c(1,2)]
head(pot.sitess)
potsmat <- as.matrix(pot.sitess)
class(potsmat)
# inclusion probs as numeric or df
#ip <- as.data.frame(pot.sites[,3])
ip <- pot.sites[,3]
class(ip)
ip
length(ip)
# alter inclProbs test1----
altInclProbs <- alterInclProbs(legacy.sites = lega,
potential.sites = potsmat,
#n = 40,
inclusion.probs = ip)
image( x=unique( potsmat[,1]), y=unique( potsmat[,2]),
z=matrix( altInclProbs, nrow=660, ncol=810),
main="Adjusted Inclusion Probabilities",
ylab=colnames( potsmat)[2], xlab=colnames( potsmat)[1])
aIP <- cbind(pot.sitess, altInclProbs)
head(aIP)
class(aIP)
coordinates(aIP) <- ~x+y
gridded(aIP) <- TRUE
altIncProbs <- raster(aIP)
plot(altIncProbs)
cellStats(altIncProbs, 'sum')
# aggregate raster
altip <- aggregate(altIncProbs, 10)
cellStats(altip, 'sum')
plot(altip)
writeRaster( altip, file=paste0(paste(d.dir, paste("altIncProbs" , study, platform, design.version, sep='-'), sep='/'), ".tif"), overwrite = TRUE)
# clear environment ----
rm(list = ls())
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
p.dir <- paste(w.dir, "plots", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
o.dir <- paste(w.dir, "outputs", sep='/')
# Read in the inclusion probs ----
cov.cuts <- raster(paste(d.dir, "Tpi_cuts-PtCloates-MBH-BOSS-v1.tif", sep='/'))
plot(cov.cuts)
inclProbs <- raster(paste(d.dir, "altIncProbs-PtCloates-MBH-Bruvs-v2.tif", sep='/'))
inclProbs <- raster(paste(d.dir, "altIncProbs-PtCloates-MBH-BOSS-v1.tif", sep='/'))
plot(inclProbs)
inclProbs <- setValues( inclProbs, values( inclProbs) / sum( values( inclProbs), na.rm=TRUE))
plot(inclProbs)
# check sun of incl probs --
cellStats(inclProbs, 'sum')
rootInclProbs <- inclProbs
#rootInclProbs <- setValues( rootInclProbs, sqrt( values( rootInclProbs)))
rootInclProbs <- setValues( rootInclProbs, values( rootInclProbs)*50)
cellStats(rootInclProbs, 'sum')
cellStats(rootInclProbs, 'sum')
plot(rootInclProbs)
# Read data ----
zones <- readRDS(paste(d.dir, "Zones_PtCloates.RDS", sep='/')) # this one in different folder
#Deans <- readRDS( "DeansPoints_forinNOutMP-d3.RDS")
rast <- readRDS(paste(d.dir, "rasters_PtCloates.RDS", sep='/'))
#if( class( BRUVS) != "SpatialPointsDataFrame")
#Deans <- SpatialPointsDataFrame( coords=Deans[,c("Longitude","Latitude")], data=Deans, proj4string = CRS( proj4string( zones[[1]])))
#proj4string(Deans) <- proj4string(swrast$bathy)
straw.nums <- readRDS(paste(d.dir, "StrawmanNumbers_PtCloates-MBH_Bruvs_v1.RDS", sep ='/'))
straw.nums
# change straw nums to account for legacy sites
straw.nums[1] <- 25-1
straw.nums
#if( class( BRUVS) != "SpatialPointsDataFrame")
#Deans <- SpatialPointsDataFrame( coords=Deans[,c("Longitude","Latitude")], data=Deans, proj4string = CRS( proj4string( zones[[1]])))
#proj4string(Deans) <- proj4string(swrast$bathy)
straw.nums <- readRDS(paste(d.dir, "StrawmanNumbers_PtCloates-MBH_BOSS_v1.RDS", sep ='/'))
straw.nums
# change straw nums to account for legacy sites
straw.nums[1] <- 25-1
straw.nums
####  Set the seed for reproducability
#set.seed( 777)
#### HAVE NOT BEEN ABLE TO MAKE THIS FUNCTION WORK ----
newSites <- list(inNP = NULL, outNP = NULL)
for( zz in c("inNP", "outNP")){
print( zz)
#the number of samples to take (specified minus the legacy number)
#numby <- floor( (straw.nums[zz])/4)  # for clustered cluster - without legacy sites
numby <- floor( (straw.nums[zz])) # for not clustered sites
#numby <- floor( (straw.nums[zz] - numRef[zz])/2)
#numby <- floor( (straw.nums[zz] - numRef[zz])) # with legacy sites
#set up spatial domain
myZone <- zones[[zz]]
#if( zz == "AMP"){
# myZone = zones$AMP - zones$IUCN2
#set.seed( 747)
#}
#tmpIP <- mask( rootInclProbs, myZone)
tmpIP <- mask( inclProbs, myZone)
tmpIP <- crop( tmpIP, myZone)
#take the sample of clusters based on root incl probs
newSites[[zz]] <- quasiSamp( n=numby, potential.sites=coordinates( tmpIP), inclusion.probs=values(tmpIP), nSampsToConsider=5000)
#plotting (maybe remove at a later date?)
tmpIPFull <- mask( inclProbs, myZone)
tmpIPFull <- crop( tmpIPFull, myZone)
plot( tmpIPFull)
#plot( legacySites, add=TRUE, pch=1, col='red')
points( newSites[[zz]][,c("x","y")], pch=20, col='black')
}
newSites <- do.call( "rbind", newSites)
head(newSites)
# Give id to sites and zones --
site.names <- row.names(newSites)
newSites$site <- as.factor(site.names)
#zone.names <- gsub('.{3}$', '', site.names) # remove last 3 characters
zone.names <- substr(site.names, 1, 3) # extract first three characters
newSites$zone <- as.factor(zone.names)
newSites$zone
head(newSites)
newSites$type <- "MBH"
newSites <- SpatialPointsDataFrame( coords=newSites[,c("x","y")], data=newSites, proj4string=CRS(proj4string(inclProbs)))
# read legacy sites to plot ----
legacy <- readOGR(paste(s.dir, "legacy_Point_Cloates.shp", sep='/'))
head(legacy)
# Plot --
plot(inclProbs)
plot(rast$tpi, main = "TPI")
plot(cov.cuts)
plot(zones$All, add=T)
plot(newSites, col=newSites$zone, pch = 20, add=T) # 41
plot(legacy, col = "blue", pch=20, add=TRUE)
newSites$zone
# join sites and legacy ----
proj4string(legacy) <- proj4string(rast$depth)
proj4string(newSites) <- proj4string(rast$depth)
allsites <- raster::union(newSites, legacy)
head(allsites)
ID <- paste(1:50)
allsites$uniqueID <- ID
head(allsites)
## Get CRS in utm ----
crs1 <- CRS("+init=epsg:32750") # WGS 84 / UTM zone 50S
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
dist1 <- gDistance(p1u, byid =T)
dist1
max(dist1)
min(dist1[dist1 > 0]) # minimum distance other than 0
## p1 ----
p1_matrix <- gWithinDistance(p1u, dist = 50, byid = TRUE)
diag(p1_matrix) <- NA
p1_matrix
p1_matrix[lower.tri(p1_matrix, diag=TRUE)] <- NA
p1_matrix
colSums(p1_matrix, na.rm=TRUE) == 0
v1 <- colSums(p1_matrix, na.rm=TRUE) == 0
p1u[v1, ] # 24 features left
remaining.sites <- p1u[v1, ]
remaining.sites <- spTransform(remaining.sites, proj4string(legacy))
head(remaining.sites)
# plot --
plot(inclProbs, main = "Inclusion probabilities")
plot(cov.cuts, main = "TPI cuts")
plot(rast$tpi, main = "TPI")
plot(zones$All, add=T)
remaining.sites$type  <- as.factor(remaining.sites$type)
# plot --
plot(inclProbs, main = "Inclusion probabilities")
plot(cov.cuts, main = "TPI cuts")
plot(rast$tpi, main = "TPI")
plot(zones$All, add=T)
remaining.sites$type  <- as.factor(remaining.sites$type)
remaining.sites$zone  <- as.factor(remaining.sites$zone)
plot(remaining.sites, pch=20, add=T)
plot(remaining.sites, col=remaining.sites$type, pch = 20, add=T) # 41
# rename zone
levels(remaining.sites$zone)[levels(remaining.sites$zone)=="inN"] <- "inNP"
levels(remaining.sites$zone)[levels(remaining.sites$zone)=="out"] <- "outNP"
levels(remaining.sites$zone)
head(remaining.sites)
plot(remaining.sites, pch=20, add=T)
## Save --
site <- "Pt-Cloates"
design <- "50BOSS"
version <- "v1"
writeOGR(remaining.sites, o.dir, paste(site, design, version, sep='-'), driver = "ESRI Shapefile", overwrite = T)
# clear environment ----
rm(list = ls())
# Set names ----
study <- "PtCloates-MBH"
platform <- "BOSS"
design.version <- "v2"
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
dat <- readRDS(paste(d.dir,"Data_PtCloates.RDS", sep ='/'))
rast <- readRDS(paste(d.dir, "rasters_PtCloates.RDS", sep='/'))
zones <- readRDS(paste(d.dir, "Zones_PtCloates.RDS", sep='/'))
straw.nums <- c(25, 25)  # for BRUVs - numbers of drops rest w structure + caut with structure,cau wout str, open w str, open wout str
#straw.nums <- c(6,6,6,6,6,6,8,6,6,20,28,12,28) # for BOSS
straw.props <- straw.nums / sum( straw.nums)
straw.props
names( straw.nums) <- names( straw.props) <- c("inNP", "outNP")
saveRDS(straw.nums, file = paste0(paste(d.dir, paste("StrawmanNumbers" , study, platform, design.version, sep='_'), sep='/'), ".RDS"))
#Bathy.quant <- c(0,0.20, 0.66, 1)
hist(rast$tpi)
tpi.quant <- c(0,0.2, 0.9, 1)
tpi.cuts <- quantile(rast$tpi, tpi.quant)#c( -Inf,0.02,0.04,0.08,0.16,Inf)
tpi.cuts # -200 -149 -118  -86
#trying to make it so there is no hand-picking (except for the hand-picked function)
tmp <- cumsum( tpi.quant)
tmp
#Bathy.targetNums <- rep( floor( 18/8), 4)#floor( ( tmp / sum( tmp))[-1] * 200)#rep( 40, 5)#c( 20,20,30,65,65)
tpi.targetNums <- rep(floor( ( tmp / sum( tmp))[-1] * sum(straw.nums)))
tpi.targetProps <-  slope.targetNums / sum( tpi.targetNums)
tpi.targetProps
Dat_small <- dat[!is.na( dat$tpi),]
tmp <- colSums( Dat_small[,c("inNP", "outNP")], na.rm=TRUE)
#tmp[2] <- tmp[2] - tmp[1] # so similar amount of sites in SPZ and MUZ
props <- tmp / nrow( Dat_small)
props <- props / sum( props) # 1 UP TO HERE
catT <- cut( rast$tpi, breaks=tpi.cuts, na.rm=TRUE)
plot( catT); plot( zones$All, border = "black", add=TRUE)
# get bathy target props
#Bathy.targetProps <- c(0.3,0.3,0.4)
TPI.targetProps <- c(0.3,0.35,0.35)
# initial raster from strata raster --
inclProbs <- catT
plot(inclProbs)
for( zz in c("inNP", "outNP")){
print( zz)
# if( zz == "os")
#   zoneID <- extract( x=catB, y=zones$os, cellnumbers=TRUE)
# zoneID <- extract( x=catB, y=zones$MUZ-zones$NPZ, cellnumbers=TRUE)
#else
zoneID <- extract( x=catT, y=zones[[zz]], cellnumbers=TRUE)
propsOfstrata <- table( catT@data@values[zoneID[[1]][,"cell"]])
propsOfstrata <- propsOfstrata / sum( propsOfstrata)
#if(length(propsOfstrata) == 4)
tmp <- TPI.targetProps / propsOfstrata #the desired inclusion probs (unstandardised)
# else
#   if(length(TPI.targetProps) == 3)
#     tmp <- Bathy.targetProps2 / propsOfstrata #the desired inclusion probs (unstandardised)
# else
#   if(length(TPI.targetProps) == 2)
#     tmp <- Bathy.targetProps3 / propsOfstrata #the desired inclusion probs (unstandardised)
# else
#   tmp <- TPI.targetProps / propsOfstrata #the desired inclusion probs (unstandardised)
for( ii in 1:length( propsOfstrata)){
inclProbs[zoneID[[1]][,"cell"]][zoneID[[1]][,"value"]==ii] <- tmp[ii]
}
inclProbs[zoneID[[1]][,"cell"]][is.na( inclProbs[zoneID[[1]][,"cell"]])] <- 0
inclProbs[zoneID[[1]][,"cell"]] <- inclProbs[zoneID[[1]][,"cell"]] / sum( inclProbs[zoneID[[1]][,"cell"]])
}
inclProbs@data@values[inclProbs@data@values %in% c(0,1,2,3,4,5,6,7,8)] <- NA  #cheats way to crop
plot( inclProbs)
cellStats(inclProbs, 'sum')
#standardising so that the zone totals are correct according to straw.props | straw.nums
inNPzone <- extract( x=catT, y=zones$inNP, cellnumbers=TRUE)
outNPzone <- extract( x=catT, y=zones$outNP, cellnumbers=TRUE)
inclProbs@data@values[inNPzone[[1]][,'cell']] <- inclProbs@data@values[inNPzone[[1]][,'cell']] * straw.props["inNP"]
inclProbs@data@values[outNPzone[[1]][,'cell']] <- inclProbs@data@values[outNPzone[[1]][,'cell']] * straw.props["outNP"]
plot(inclProbs)
cellStats(inclProbs, 'sum')
writeRaster( inclProbs, file=paste0(paste(d.dir, paste("inclProbs" , study, platform, design.version, sep='-'), sep='/'), ".tif"), overwrite = TRUE)
# clear environment ----
rm(list = ls())
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
o.dir <- paste(w.dir, "outputs", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
study <- "PtCloates-MBH"
platform <- "BOSS"
design.version <- "v2"
total.no.deployments <- "50_deployments"
# Read legacy sites ----
legacy <- read.csv(paste(s.dir, "legacy_Point_Cloates.csv", sep='/'))
coordinates(legacy) <- ~x+y
#legacy <- readOGR(paste(s.dir, "Legacy_sites.shp", sep='/'))
proj4string(legacy)
plot(legacy, pch=20, add=T)
legacys <- as.data.frame(legacy)
legacyss <- legacys[,c(2,3)]
# make matrix
#legacyss <- legacyss[c(1:5),]
#class(legacyss)
lega <- as.matrix(legacyss)
class(lega)
lega
# Read inclusion probabilities ----
inclProbs <- raster(paste(d.dir, "inclProbs-PtCloates-MBH-BOSS-v2.tif", sep='/'))
plot(inclProbs)
# test dissagregating inclusion probs ----
inclProbs <- raster::disaggregate(inclProbs, 10)
plot(inclProbs)
# potential sites ----
pot.sites <- as.data.frame(inclProbs, xy = TRUE)
head(pot.sites)
pot.sites <- arrange(pot.sites, y)
head(pot.sites)
class(pot.sites)
# as df
pot.sitess <- pot.sites[,c(1,2)]
head(pot.sitess)
potsmat <- as.matrix(pot.sitess)
class(potsmat)
# inclusion probs as numeric or df
#ip <- as.data.frame(pot.sites[,3])
ip <- pot.sites[,3]
class(ip)
ip
length(ip)
# alter inclProbs test1----
altInclProbs <- alterInclProbs(legacy.sites = lega,
potential.sites = potsmat,
#n = 40,
inclusion.probs = ip)
image( x=unique( potsmat[,1]), y=unique( potsmat[,2]),
z=matrix( altInclProbs, nrow=660, ncol=810),
main="Adjusted Inclusion Probabilities",
ylab=colnames( potsmat)[2], xlab=colnames( potsmat)[1])
aIP <- cbind(pot.sitess, altInclProbs)
head(aIP)
class(aIP)
coordinates(aIP) <- ~x+y
gridded(aIP) <- TRUE
altIncProbs <- raster(aIP)
plot(altIncProbs)
cellStats(altIncProbs, 'sum')
# aggregate raster
altip <- aggregate(altIncProbs, 10)
cellStats(altip, 'sum')
plot(altip)
writeRaster( altip, file=paste0(paste(d.dir, paste("altIncProbs" , study, platform, design.version, sep='-'), sep='/'), ".tif"), overwrite = TRUE)
# clear environment ----
rm(list = ls())
# Directories ----
w.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
#w.dir <- "~/MBH_AbroNPZs"
p.dir <- paste(w.dir, "plots", sep = '/')
d.dir <- paste(w.dir, "data", sep='/')
s.dir <- paste(w.dir, "shapefiles", sep='/')
r.dir <- paste(w.dir, "rasters", sep='/')
o.dir <- paste(w.dir, "outputs", sep='/')
# Read in the inclusion probs ----
cov.cuts <- raster(paste(d.dir, "Tpi_cuts-PtCloates-MBH-BOSS-v1.tif", sep='/'))
plot(cov.cuts)
inclProbs <- raster(paste(d.dir, "altIncProbs-PtCloates-MBH-BOSS-v2.tif", sep='/'))
plot(inclProbs)
inclProbs <- setValues( inclProbs, values( inclProbs) / sum( values( inclProbs), na.rm=TRUE))
plot(inclProbs)
# check sun of incl probs --
cellStats(inclProbs, 'sum')
rootInclProbs <- inclProbs
#rootInclProbs <- setValues( rootInclProbs, sqrt( values( rootInclProbs)))
rootInclProbs <- setValues( rootInclProbs, values( rootInclProbs)*50)
cellStats(rootInclProbs, 'sum')
cellStats(rootInclProbs, 'sum')
plot(rootInclProbs)
# Read data ----
zones <- readRDS(paste(d.dir, "Zones_PtCloates.RDS", sep='/')) # this one in different folder
#Deans <- readRDS( "DeansPoints_forinNOutMP-d3.RDS")
rast <- readRDS(paste(d.dir, "rasters_PtCloates.RDS", sep='/'))
#if( class( BRUVS) != "SpatialPointsDataFrame")
#Deans <- SpatialPointsDataFrame( coords=Deans[,c("Longitude","Latitude")], data=Deans, proj4string = CRS( proj4string( zones[[1]])))
#proj4string(Deans) <- proj4string(swrast$bathy)
straw.nums <- readRDS(paste(d.dir, "StrawmanNumbers_PtCloates-MBH_BOSS_v1.RDS", sep ='/'))
straw.nums
# change straw nums to account for legacy sites
straw.nums[1] <- 25-1
straw.nums
####  Set the seed for reproducability
#set.seed( 777)
#### HAVE NOT BEEN ABLE TO MAKE THIS FUNCTION WORK ----
newSites <- list(inNP = NULL, outNP = NULL)
for( zz in c("inNP", "outNP")){
print( zz)
#the number of samples to take (specified minus the legacy number)
#numby <- floor( (straw.nums[zz])/4)  # for clustered cluster - without legacy sites
numby <- floor( (straw.nums[zz])) # for not clustered sites
#numby <- floor( (straw.nums[zz] - numRef[zz])/2)
#numby <- floor( (straw.nums[zz] - numRef[zz])) # with legacy sites
#set up spatial domain
myZone <- zones[[zz]]
#if( zz == "AMP"){
# myZone = zones$AMP - zones$IUCN2
#set.seed( 747)
#}
#tmpIP <- mask( rootInclProbs, myZone)
tmpIP <- mask( inclProbs, myZone)
tmpIP <- crop( tmpIP, myZone)
#take the sample of clusters based on root incl probs
newSites[[zz]] <- quasiSamp( n=numby, potential.sites=coordinates( tmpIP), inclusion.probs=values(tmpIP), nSampsToConsider=5000)
#plotting (maybe remove at a later date?)
tmpIPFull <- mask( inclProbs, myZone)
tmpIPFull <- crop( tmpIPFull, myZone)
plot( tmpIPFull)
#plot( legacySites, add=TRUE, pch=1, col='red')
points( newSites[[zz]][,c("x","y")], pch=20, col='black')
}
newSites <- do.call( "rbind", newSites)
head(newSites)
# Give id to sites and zones --
site.names <- row.names(newSites)
newSites$site <- as.factor(site.names)
#zone.names <- gsub('.{3}$', '', site.names) # remove last 3 characters
zone.names <- substr(site.names, 1, 3) # extract first three characters
newSites$zone <- as.factor(zone.names)
newSites$zone
head(newSites)
newSites$type <- "MBH"
newSites <- SpatialPointsDataFrame( coords=newSites[,c("x","y")], data=newSites, proj4string=CRS(proj4string(inclProbs)))
# read legacy sites to plot ----
legacy <- readOGR(paste(s.dir, "legacy_Point_Cloates.shp", sep='/'))
head(legacy)
# Plot --
plot(inclProbs)
plot(rast$tpi, main = "TPI")
plot(cov.cuts)
plot(zones$All, add=T)
plot(newSites, col=newSites$zone, pch = 20, add=T) # 41
plot(legacy, col = "blue", pch=20, add=TRUE)
newSites$zone
# join sites and legacy ----
proj4string(legacy) <- proj4string(rast$depth)
proj4string(newSites) <- proj4string(rast$depth)
allsites <- raster::union(newSites, legacy)
head(allsites)
ID <- paste(1:50)
allsites$uniqueID <- ID
head(allsites)
## Get CRS in utm ----
crs1 <- CRS("+init=epsg:32750") # WGS 84 / UTM zone 50S
## transform the points into UTM --
p1u <- spTransform(allsites, crs1)
dist1 <- gDistance(p1u, byid =T)
dist1
max(dist1)
min(dist1[dist1 > 0]) # minimum distance other than 0
## p1 ----
p1_matrix <- gWithinDistance(p1u, dist = 50, byid = TRUE)
diag(p1_matrix) <- NA
p1_matrix
p1_matrix[lower.tri(p1_matrix, diag=TRUE)] <- NA
p1_matrix
colSums(p1_matrix, na.rm=TRUE) == 0
v1 <- colSums(p1_matrix, na.rm=TRUE) == 0
p1u[v1, ] # 24 features left
remaining.sites <- p1u[v1, ]
remaining.sites <- spTransform(remaining.sites, proj4string(legacy))
head(remaining.sites)
# plot --
plot(inclProbs, main = "Inclusion probabilities")
plot(cov.cuts, main = "TPI cuts")
plot(rast$tpi, main = "TPI")
plot(zones$All, add=T)
remaining.sites$type  <- as.factor(remaining.sites$type)
remaining.sites$zone  <- as.factor(remaining.sites$zone)
plot(remaining.sites, pch=20, add=T)
# plot --
plot(inclProbs, main = "Inclusion probabilities")
## Save --
site <- "Pt-Cloates"
design <- "50BOSS"
version <- "v1"
# rename zone
levels(remaining.sites$zone)[levels(remaining.sites$zone)=="inN"] <- "inNP"
levels(remaining.sites$zone)[levels(remaining.sites$zone)=="out"] <- "outNP"
levels(remaining.sites$zone)
head(remaining.sites)
version <- "v2"
writeOGR(remaining.sites, o.dir, paste(site, design, version, sep='-'), driver = "ESRI Shapefile", overwrite = T)
git merge --abort
